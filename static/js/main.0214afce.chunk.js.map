{"version":3,"sources":["Images/c-programming.png","Utils/index.js","components/CodeStatus.js","components/ButtonPanel.js","components/WaitingScreen.js","Utils/ASTVisualizer.js","components/FrontPage.js","components/App.js","Utils/Parser.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","getFlatColors","main","getComputedStyle","document","documentElement","getPropertyValue","darkMain","one","two","three","four","five","gray","clearTextColor","DarkTextColor","Status","styled","div","_templateObject","_ref","bg","CodeStatus","_ref2","_ref2$status","status","color","message","react_default","a","createElement","ButtonPanelContainer","ButtonPanel_templateObject","Top","_templateObject2","Buttons","_templateObject3","ButtonPanel","visualize","serialize","restart","_ref$disabled","disabled","onClick","Circle","WaitingScreen_templateObject","radius","_ref3","DottedCircle","WaitingScreen_templateObject2","_ref4","_ref5","_ref6","dotSize","_ref7","CenteredText","WaitingScreen_templateObject3","WaitingScreen","react_anime_default","easing","duration","direction","loop","delay","el","index","scale","rotate","getChildren","node","type","body","declarations","init","id","expression","left","right","callee","arguments","object","property","properties","key","value","argument","test","consequent","alternate","getLabel","name","raw","operator","params1","_","params","join","params2","AstVisualizer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","recursiveBuilder","children","tree","forEach","child","push","title","expanded","start","end","buildTree","ast","highlightCode","codeEditor","cm","editor","doc","fromIndex","posFromIndex","toIndex","markText","className","clearHighlightedCode","getAllMarks","m","clear","state","treeData","setState","nextProps","_this2","index_esm","onChange","canDrag","generateNodeProps","onMouseEnter","onMouseLeave","Component","Image","FrontPage_templateObject","url","AppTitle","FrontPage_templateObject2","AppDescription","FrontPage_templateObject3","FrontPage","CLogo","Container","App_templateObject","LeftContainer","App_templateObject2","RightContainer","App_templateObject3","App","code","disableButtons","compiling","handleClear","clearCode","length","undefined","getValue","replace","RegExp","acorn","generateAST","frontPage","waitingScreen","WaitingScreen_WaitingScreen","_this$state","rightPage","keys","Utils_ASTVisualizer","react_codemirror2","ref","options","mode","theme","lineNumbers","lineWrapping","gutters","onBeforeChange","data","onPaste","Boolean","window","location","hostname","match","ReactDOM","render","components_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0214afce.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/c-programming.562eee74.png\";","export function getFlatColors() {\n    return {\n        main: getComputedStyle(document.documentElement).getPropertyValue('--main'),\n        darkMain: getComputedStyle(document.documentElement).getPropertyValue('--dark-main'),\n        one: getComputedStyle(document.documentElement).getPropertyValue('--one'),\n        two: getComputedStyle(document.documentElement).getPropertyValue('--two'),\n        three: getComputedStyle(document.documentElement).getPropertyValue('--three'),\n        four: getComputedStyle(document.documentElement).getPropertyValue('--four'),\n        five: getComputedStyle(document.documentElement).getPropertyValue('--five'),\n        gray: getComputedStyle(document.documentElement).getPropertyValue('--gray'),\n        clearTextColor: getComputedStyle(document.documentElement).getPropertyValue('--clear-text-color'),\n        DarkTextColor: getComputedStyle(document.documentElement).getPropertyValue('--dark-text-color')\n    }\n}","import React from \"react\";\nimport styled from 'styled-components'\nimport {getFlatColors} from \"../Utils\";\n\nconst Status = styled.div`\n  background: ${({bg}) => bg};\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  font-weight: 300\n  font-size: 14px;\n  padding: 5px;\n  padding-left: 10px;\n  margin-bottom: 5px;\n\n  > span {\n    font-weight: 500;\n    margin-left: 10px;\n  }\n\n  @media (max-width: 700px) {\n    font-size: 8px;\n  }\n`\n\nexport default function CodeStatus({status = 'compiles'}) {\n    let color = '';\n    let message = '';\n    if (status === 'compiles') {\n        color = getFlatColors().five;\n        message = 'Code status: Compiles..';\n    }\n    else if (status === 'error') {\n        color = getFlatColors().two;\n        message = 'Code status: Error..';\n    }\n    else if (status === 'warning') {\n        color = getFlatColors().four;\n        message = 'Code status: warning..';\n    }\n\n    return (\n        <Status bg={color}>\n            {message}\n        </Status>\n    );\n}","import React from 'react';\nimport styled from 'styled-components'\nimport CodeStatus from \"./CodeStatus\";\n\nconst ButtonPanelContainer = styled.div`\n  background: #1F292E;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n`\n\nconst Top = styled.div`\n  padding: 3px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin: 10px;\n`\n\nconst Buttons = styled.div`\n  > button {\n    border: none;\n    background: none;\n    color: #fff;\n    font-size: 18px;\n    padding: 8px;\n    text-shadow: -1px -1px 1px rgba(255,255,255,.1), 1px 1px 1px rgba(0,0,0,.5);\n\n    @media (max-width: 700px) {\n      font-size: 10px;\n    }\n  }\n\n  > button:hover {\n    color: #fff;\n    cursor: pointer;\n  }\n\n  > button:disabled {\n    color: #919191;\n  }\n\n  > button:active {\n    color: #fff;\n    text-shadow: none;\n  }\n`\n\nexport default function ButtonPanel({visualize, serialize, restart, disabled = false, status}) {\n    return (\n        <ButtonPanelContainer>\n            <Top>\n                <Buttons>\n                    <button disabled={disabled} onClick={visualize}>Visualize</button>\n                    <button onClick={serialize}>Serialize</button>\n                    <button onClick={restart}>Restart</button>\n                </Buttons>\n            </Top>\n            <CodeStatus status={status}/>\n        </ButtonPanelContainer>\n    );\n}","import React from 'react';\nimport Anime from 'react-anime';\nimport '../css/WaitingScreen.css'\nimport styled from 'styled-components'\n\nconst Circle = styled.div`\n    border-radius: 50%;\n    height: ${({radius}) => radius + \"px\"};\n    width: ${({radius}) => radius + \"px\"};\n    background:#1F292E;\n    position: absolute;\n    top: 50%;\n    left: 75%;\n    margin: ${({radius}) => -radius / 2 + \"px\" + \" 0 0 \" + -radius / 2 + \"px\"};\n`\nconst DottedCircle = styled.div`\n    border-radius: 50%;\n    height: ${({radius}) => radius + \"px\"};\n    width: ${({radius}) => radius + \"px\"};\n    border: ${({dotSize}) => dotSize + \"px dashed #1F292E\"};\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    margin: ${({radius, dotSize}) => -((radius / 2) + dotSize) + \"px\" + \" 0 0 \" + -((radius / 2) + dotSize) + \"px\"};\n    overflow: hidden;\n`\nconst CenteredText = styled.div`\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    color: #fff;\n    font: 3em bold;\n`\nexport default function WaitingScreen() {\n\n    return (\n        <Anime easing=\"easeOutCubic\"\n               duration={1500}\n               direction=\"alternate\"\n               loop={true}\n               delay={(el, index) => index * 10}\n               scale={.90}\n        >\n            <Circle radius={400}>\n                <Anime loop={true}\n                       easing={\"linear\"}\n                       rotate='360deg'\n                       duration={8000}>\n                    <DottedCircle radius={395} dotSize={40}/>\n                </Anime>\n                <CenteredText>\n                    Compiling\n                </CenteredText>\n            </Circle>\n        </Anime>\n    );\n}","import React, {Component} from 'react';\nimport * as _ from \"lodash\";\nimport SortableTree from \"react-sortable-tree\";\nimport 'react-sortable-tree/style.css';\nimport '../css/ASTVisualizer.css'\n\nlet getChildren = (node) => {\n\n    switch (node.type) {\n\n        case 'Program':\n            return node.body;\n\n        case 'VariableDeclaration':\n            return node.declarations;\n\n        case 'VariableDeclarator':\n            return node.init ? [node.id, node.init] : [node.id];\n\n        case 'ExpressionStatement':\n            return [node.expression];\n\n        case 'BinaryExpression':\n            return [node.left, node.right];\n\n        case 'AssignmentExpression':\n            return [node.left, node.right];\n\n        case 'CallExpression':\n            return [node.callee, {type: 'arguments', arguments: node.arguments}];\n\n        case 'arguments':\n            return node.arguments;\n\n        case 'MemberExpression':\n            return [node.object, node.property];\n\n        case 'NewExpression':\n            return node.arguments;\n\n        case 'ObjectExpression':\n            return node.properties;\n\n        case 'Property':\n            return [node.key, node.value];\n\n        case 'FunctionDeclaration':\n            return [node.body];\n\n        case 'FunctionExpression':\n            return [node.body];\n\n        case 'BlockStatement':\n            return node.body;\n\n        case 'ReturnStatement':\n            return node.argument ? [node.argument] : [];\n\n        case 'UnaryExpression':\n            return [node.argument];\n\n        case 'IfStatement':\n            return [node.test, node.consequent];\n\n        case 'ConditionalExpression':\n            return [node.test, node.consequent, node.alternate];\n\n        default:\n            return [];\n    }\n};\n\nlet getLabel = (node) => {\n\n    switch (node.type) {\n\n        case 'Identifier':\n            return node.name;\n\n        case 'Literal':\n            return node.raw;\n\n        case 'UnaryExpression':\n            return node.operator;\n\n        case 'BinaryExpression':\n            return node.operator;\n\n        case 'AssignmentExpression':\n            return node.operator;\n\n        case 'FunctionDeclaration':\n            var params1 = _.map(node.params, 'name').join(',');\n            return 'function ' + (node.id && node.id.name || '') + '(' + params1 + ')';\n\n        case 'FunctionExpression':\n            var params2 = _.map(node.params, 'name').join(',');\n            return 'function ' + (node.id && node.id.name || '') + '(' + params2 + ')';\n\n        default:\n            return node.type;\n    }\n};\n\nclass AstVisualizer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            treeData: [],\n        };\n\n    }\n\n    componentDidMount() {\n        this.setState({treeData: this.buildTree(this.props.ast)})\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.setState({treeData: this.buildTree(nextProps.ast)})\n    }\n\n    recursiveBuilder = (node) => {\n        let children = getChildren(node);\n        let tree = [];\n        if (children === [])\n            return children;\n        children.forEach((child) => {\n            tree.push({\n                title: getLabel(child),\n                children: this.recursiveBuilder(child),\n                expanded: true,\n                type: child.type,\n                start: child.start,\n                end: child.end\n            });\n        });\n        return tree\n    };\n\n    buildTree = (ast) => {\n        let tree = [];\n        tree.push({\n            title: getLabel(ast),\n            children: this.recursiveBuilder(ast),\n            expanded: true,\n            type: ast.type,\n            start: ast.start,\n            end: ast.end\n        });\n        return tree\n    };\n\n    highlightCode = (start, end) => {\n        let codeEditor = this.props.cm.editor.doc;\n        const fromIndex = codeEditor.posFromIndex(start);\n        const toIndex = codeEditor.posFromIndex(end);\n        codeEditor.markText(fromIndex, toIndex, {\n            className: 'highlighted-code'\n        });\n    };\n\n    clearHighlightedCode = () => {\n        this.props.cm.editor.doc.getAllMarks().forEach((m) => {\n            m.clear()\n        })\n    };\n\n    render() {\n        return (\n            <SortableTree\n                treeData={this.state.treeData}\n                onChange={treeData => this.setState({treeData})}\n                canDrag={false}\n                generateNodeProps={({node}) => {\n                    return {\n                        className: node.type,\n                        onMouseEnter: () => this.highlightCode(node.start, node.end),\n                        onMouseLeave: () => this.clearHighlightedCode()\n                    };\n                }}\n            />\n        );\n    }\n}\n\nexport default AstVisualizer;","import React from 'react';\nimport Anime from 'react-anime';\nimport '../css/WaitingScreen.css'\nimport styled from 'styled-components'\nimport Img from 'react-image'\nimport CLogo from \"../Images/c-programming.png\";\n\nconst Image = styled.div`\n    content: ${({url}) => 'url(' + url + ');'}\n    width: 40vmin;\n    margin: 10vh auto;\n`\nconst AppTitle = styled.div`\n    text-align: center;\n    font-weight: 300;\n    font-size: calc(12px + 3.6vw);\n    letter-spacing: 1.8px;\n    margin-top: 40px;\n    border: medium none;\n    margin-bottom: 20px;\n`\nconst AppDescription = styled.div`\n    text-align: center;\n    font-weight: 300;\n    margin: 0px auto;\n    font-size: calc(8px + 0.91vw);\n`\nexport default function FrontPage() {\n\n    return (\n        <div>\n            <Anime easing=\"easeOutCubic\"\n                   duration={2000}\n                   direction=\"alternate\"\n                   loop={true}\n                   scale={.9}>\n                <div>\n                    <Anime rotate={\"360deg\"}\n                           loop={true}\n                           delay={6000}\n                           duration={4000}>\n                        <Image url={CLogo}/>\n                    </Anime>\n                </div>\n            </Anime>\n            <AppTitle>The Ultimate SIMD visualizer</AppTitle>\n            <AppDescription>Built by <strong>Jérémie Piotte</strong> and <strong>Pierre Marie Ntang</strong></AppDescription>\n        </div>\n    );\n}","import React, {Component} from 'react';\nimport {Controlled as CodeMirror} from 'react-codemirror2'\nimport 'codemirror/lib/codemirror.css'\nimport 'codemirror/theme/material.css'\nimport 'codemirror/mode/clike/clike.js'\nimport 'codemirror/addon/selection/mark-selection.js'\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport 'react-tabs/style/react-tabs.css';\nimport '../css/App.css';\nimport styled from 'styled-components'\nimport ButtonPanel from \"./ButtonPanel\";\nimport {generateAST} from \"../Utils/Parser\";\nimport WaitingScreen from \"./WaitingScreen\";\nimport AstVisualizer from \"../Utils/ASTVisualizer\";\nimport FrontPage from \"./FrontPage\";\n\nconst Container = styled.div`\n  display: flex;\n`\n\nconst LeftContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100vh\n  width: 50vw;\n  overflow: scroll;\n`\n\nconst RightContainer = styled.div`\n  width: 50vw;\n  height: 100vh;\n  overflow: hidden;\n`\n\nclass App extends Component {\n    state = {\n        code: 'int a = g(k);\\nint b = 600;\\nint c = a + b;',\n        disableButtons: false,\n        status: 'compiles',\n        compiling: false,\n        ast: {}\n    };\n\n    constructor(props) {\n        super(props)\n        this.frontPage = <FrontPage/>;\n        this.waitingScreen = <WaitingScreen/>;\n    }\n\n    componentDidMount() {\n    }\n\n    handleClear = (clearCode = true) => {\n        this.setState(({code}) => ({\n            code: clearCode === true ? '' : code\n        }));\n    };\n\n    visualize = () => {\n        this.setState({compiling: true});\n        let ast = generateAST(this.cm.editor);\n        this.setState({compiling: false, ast});\n    };\n\n    serialize = () => {\n\n    };\n\n    restart = () => {\n        this.setState({compiling: false, ast: {}});\n    };\n\n    render() {\n        const {code, disableButtons, status, compiling} = this.state;\n        let rightPage = this.frontPage;\n        if (compiling) {\n            rightPage = this.waitingScreen;\n        }\n        else if (Object.keys(this.state.ast).length > 0) {\n            rightPage = <AstVisualizer cm={this.cm} ast={this.state.ast}/>\n        }\n\n        return (\n            <Container>\n                <LeftContainer>\n                    <ButtonPanel\n                        visualize={this.visualize}\n                        serialize={this.serialize}\n                        restart={this.restart}\n                        disabled={disableButtons}\n                        status={status}\n                    />\n                    <CodeMirror\n                        ref={(cm) => this.cm = cm}\n                        value={code}\n                        options={{\n                            mode: 'text/x-csrc',\n                            theme: 'material',\n                            lineNumbers: true,\n                            lineWrapping: true,\n                            gutters: [\"CodeMirror-lint-markers\"],\n                        }}\n                        onBeforeChange={(editor, data, code) => {\n                            if (code === '') {\n                                this.handleClear(true)\n                            } else {\n                                this.setState({code})\n                                //this.myInterpreter = getInterpreter(code)\n                            }\n                        }}\n                        onPaste={() => {\n                            this.handleClear(false)\n                        }}\n                    />\n                </LeftContainer>\n                <RightContainer>\n                    {rightPage}\n                </RightContainer>\n            </Container>\n        );\n    }\n}\n\nexport default App;\n","import * as acorn from \"acorn\";\n\n\nconst testASR = `{\\n    \"type\": \"Program\",\\n    \"start\": 0,\\n    \"end\": 38,\\n    \"body\": [\\n        {\\n            \"type\": \"VariableDeclaration\",\\n            \"start\": 0,\\n            \"end\": 12,\\n            \"declarations\": [\\n                {\\n                    \"type\": \"VariableDeclarator\",\\n                    \"start\": 4,\\n                    \"end\": 12,\\n                    \"id\": {\\n                        \"type\": \"Identifier\",\\n                        \"start\": 4,\\n                        \"end\": 5,\\n                        \"name\": \"a\"\\n                    },\\n                    \"init\": {\\n                        \"type\": \"CallExpression\",\\n                        \"start\": 8,\\n                        \"end\": 12,\\n                        \"callee\": {\\n                            \"type\": \"Identifier\",\\n                            \"start\": 8,\\n                            \"end\": 9,\\n                            \"name\": \"g\"\\n                        },\\n                        \"arguments\": [\\n                            {\\n                                \"type\": \"Identifier\",\\n                                \"start\": 10,\\n                                \"end\": 11,\\n                                \"name\": \"k\"\\n                            }\\n                        ]\\n                    }\\n                }\\n            ],\\n            \"kind\": \"var\"\\n        },\\n        {\\n            \"type\": \"VariableDeclaration\",\\n            \"start\": 13,\\n            \"end\": 24,\\n            \"declarations\": [\\n                {\\n                    \"type\": \"VariableDeclarator\",\\n                    \"start\": 17,\\n                    \"end\": 24,\\n                    \"id\": {\\n                        \"type\": \"Identifier\",\\n                        \"start\": 17,\\n                        \"end\": 18,\\n                        \"name\": \"b\"\\n                    },\\n                    \"init\": {\\n                        \"type\": \"Literal\",\\n                        \"start\": 21,\\n                        \"end\": 24,\\n                        \"value\": 600,\\n                        \"raw\": \"600\"\\n                    }\\n                }\\n            ],\\n            \"kind\": \"var\"\\n        },\\n        {\\n            \"type\": \"VariableDeclaration\",\\n            \"start\": 25,\\n            \"end\": 38,\\n            \"declarations\": [\\n                {\\n                    \"type\": \"VariableDeclarator\",\\n                    \"start\": 29,\\n                    \"end\": 38,\\n                    \"id\": {\\n                        \"type\": \"Identifier\",\\n                        \"start\": 29,\\n                        \"end\": 30,\\n                        \"name\": \"c\"\\n                    },\\n                    \"init\": {\\n                        \"type\": \"BinaryExpression\",\\n                        \"start\": 33,\\n                        \"end\": 38,\\n                        \"left\": {\\n                            \"type\": \"Identifier\",\\n                            \"start\": 33,\\n                            \"end\": 34,\\n                            \"name\": \"a\"\\n                        },\\n                        \"operator\": \"+\",\\n                        \"right\": {\\n                            \"type\": \"Identifier\",\\n                            \"start\": 37,\\n                            \"end\": 38,\\n                            \"name\": \"b\"\\n                        }\\n                    }\\n                }\\n            ],\\n            \"kind\": \"var\"\\n        }\\n    ],\\n    \"sourceType\": \"module\"\\n}`;\n\nclass Node{\n    constructor(type, start, end) {\n        this.type = type;\n        this.start = start;\n        this.end = end;\n    }\n}\n\nexport function generateAST(editor) {\n    let code = editor.doc.getValue();\n    // code = cleanExpression(code);\n    // let ast = new Node(\"Program\", 0, code.length);\n    // ast.body = recursiveASTBuilder(code, 0, 0);\n\n    code = code.replace(new RegExp('int', 'g'), 'let');\n\n    return acorn.parse(code)\n}\n\n// function recursiveASTBuilder(code, start) {\n//     let ast = [];\n//\n//     if (isAssignExpr(code)) {\n//         let tokens = getAssignExpr(code);\n//         let end = start + code.length;\n//         let node = new Node(\"VariableDeclaration\", start, end)\n//         node.kind = tokens[1];\n//         console.log(tokens);\n//         ast.push(node)\n//     }\n//     if (isFuncDeclaration(code)) {\n//         let tokens = getFuncDeclaration(code);\n//         let end = start + code.length;\n//         let node = new Node(\"FunctionDeclaration\", start, end)\n//         ast.push(node)\n//     }\n//     if (isFuncCall(code)) {\n//         let tokens = getFuncCall(code);\n//         let end = start + code.length;\n//         let node = new Node(\"FunctionCall\", start, end)\n//         ast.push(node)\n//     }\n//     if (isReturnExpr(code)) {\n//         let tokens = getReturnExpr(code);\n//         let end = start + code.length;\n//         let node = new Node(\"ReturnExpression\", start, end)\n//         ast.push(node)\n//     }\n//\n//\n//     return ast;\n// }\n//\n// function cleanExpression(s){ //just supress superfluous space and other invisible characters\n//     return (s.replace(/\\s{1,}/g, ' ')).trim();\n// }\n//\n// function extractExpression(s){     //this function extract the different expressions of a given c code, by expression we mean a piece of code situated after a ';' or a '{' and ended either by ';' or by '}'.This extract the expressions at the \"same level\"\n//     s=cleanExpression(s);\n//     var accoladeIndication=0;\n//     var expresions=[];\n//     const delimiters=new Set([';', '}']);\n//     var i=s.indexOf('{')+1,lengthS=s.lastIndexOf('}'); // we first determine the begining and the ending of the piece of c code\n//     var  semicolonPosition=i;\n//     while(i<lengthS){\n//         if (s[i]==='{'){\n//             accoladeIndication++; //indicates if we are not inside an expression\n//         }\n//         if (s[i]==='}'){\n//             accoladeIndication--;\n//         }\n//\n//         if(delimiters.has(s[i]) && accoladeIndication === 0){ // if the caracter is a delimiter of expression and if we are not inside an expression\n//             expresions.push((s.slice(semicolonPosition+1, i)).trim()) //we extract the expression begining from the last delimiter to this delimiter\n//             semicolonPosition=i; // we save the position of this delimiter\n//         }\n//         i++;\n//     }\n//     return expresions;\n// }\n//\n// function extractParameter(s){     //this function extract the different effective parameter of a c function (call function)\n//     s=cleanExpression(s);\n//     var semicolonIndication=0;\n//     var expresions=[];\n//     const delimiters=new Set([',']);\n//     var i=0,lengthS=s.length; // we first determine the begining and the ending of the parameter previously extracted\n//     var  semicolonPosition=i;\n//     while(i<lengthS){\n//         if (s[i]==='('){\n//             semicolonIndication++; //indicates if we are not inside an expression\n//         }\n//         if (s[i]===')'){\n//             semicolonIndication--;\n//         }\n//\n//         if(delimiters.has(s[i]) && semicolonIndication === 0){ // if the caracter is a delimiter of expression and if we are not inside an expression\n//             expresions.push((s.slice(semicolonPosition, i)).trim()) //we extract the expression begining from the last delimiter to this delimiter\n//             semicolonPosition=i+1; // we save the position of this delimiter\n//         }\n//         i++;\n//         if(i===lengthS){\n//             expresions.push((s.slice(semicolonPosition, i)).trim()) //to take the last string\n//         }\n//     }\n//     return expresions;\n// }\n//\n// function processCCode(cCode){\n//     var tab=[];\n//     if(isSimpleExpression(cCode)){\n//         tab=Array.of(cCode);\n//         return tab;\n//     }\n//     if(regexFunctionDeclar.test(cCode)){\n//         var t=extractExpression(cCode);\n//         t.push('body');\n//         tab=Array.of(regexFunctionDeclar.exec(cCode)[2], ['returntype',[regexFunctionDeclar.exec(cCode)[1]]],t.reverse());\n//         for(var j=1; j<tab[2].length; j++){\n//             if (isSimpleExpression(tab[2][j])){\n//                 tab[2][j]=Array.of(tab[2][j]);\n//                 continue;\n//             }\n//             else{\n//                 tab[2][j]=processCCode(tab[2][j]);\n//             }\n//\n//         }\n//         return tab;\n//     }\n//\n//     if(regexFunctionCall.test(cCode)){\n//         var paramString = regexFunctionCall.exec(cCode)[2]\n//         var t=extractParameter(paramString);\n//         t.push('parameters');\n//         tab=Array.of(regexFunctionCall.exec(cCode)[1], t.reverse());\n//         for(var j=1; j<tab[1].length; j++){\n//             if (isSimpleExpression(tab[1][j])){\n//                 tab[1][j]=Array.of(tab[1][j]);\n//                 continue;\n//             }\n//             else{\n//                 tab[1][j]=processCCode(tab[1][j]);\n//             }\n//\n//         }\n//         return tab;\n//     }\n//     if(regexAssignExpr.test(cCode)){\n//         var regArray = regexAssignExpr.exec(cCode)\n//         tab=Array.of('=',[regArray[2],[regArray[1]]], [regArray[3]]);\n//         if (isSimpleExpression(tab[2][0])){\n//             tab[2][0]=Array.of(tab[2][0]);\n//         }\n//         else\n//         {\n//             tab[2][0]=processCCode(tab[2][0]);\n//         }\n//\n//\n//         return tab;\n//     }\n//     if(regexReturnExpr.test(cCode)){\n//         tab=Array.of('return',[regexReturnExpr.exec(cCode)[1]]);\n//         if (isSimpleExpression(tab[1][0])){\n//             tab[1][0]=Array.of(tab[1][0]);\n//         }\n//         else\n//         {\n//             tab[1][0]=processCCode(tab[1][0]);\n//         }\n//\n//\n//         return tab;\n//     }\n//\n//\n// }\n//\n// function isSimpleExpression(s){\n//     return !(isFuncDeclaration(s)||isFuncCall(s)||isAssignExpr(s)||isReturnExpr(s));\n// }\n//\n// function identifyNatureOfExpr(s){\n//     var regex=/^\\s*(?:void|char|uint8_t|short|int|long|float|double|signed|unsigned|Bool|Complex|__m128|__m128d|__m128i|__m256|__m256d|__m256i|__m512|__m512d|__m512i)\\s+(?:[_$a-zA-Z][_$a-zA-Z0-9]*)\\s*\\(\\s*(?:void|char|uint8_t|short|int|long|float|double|signed|unsigned|Bool|Complex|__m128|__m128d|__m128i|__m256|__m256d|__m256i|__m512|__m512d|__m512i)\\s+(?:[_$a-zA-Z][_$a-zA-Z0-9]*)\\s*(?:,(?:void|char|uint8_t|short|int|long|float|double|signed|unsigned|Bool|Complex|__m128|__m128d|__m128i|__m256|__m256d|__m256i|__m512|__m512d|__m512i)\\s+(?:[_$a-zA-Z][_$a-zA-Z0-9]*)\\s*)*\\s*(?:\\)\\s*(?=\\{))/;\n// }\n//\n// const regexFunctionDeclar=/^\\s*([_$a-zA-Z][_$a-zA-Z0-9]*)\\s+([_$a-zA-Z][_$a-zA-Z0-9]*)\\s*\\(\\s*(?:[_$a-zA-Z][_$a-zA-Z0-9]*)\\s+\\*?(?:[_$a-zA-Z][_$a-zA-Z0-9]*)\\s*(?:,(?:[_$a-zA-Z][_$a-zA-Z0-9]*)\\s+\\*?(?:[_$a-zA-Z][_$a-zA-Z0-9]*)\\s*)*\\s*(?:\\)\\s*(?=\\{))/;\n// const regexFunctionCall=/^\\s*([_$a-zA-Z][_$a-zA-Z0-9]*)\\s*\\((.*)(?=\\)$|\\)(?=;))/;\n// const regexReturnExpr=/^\\s*return\\s+(.*)/;\n// const regexAssignExpr=/^\\s*(?:([_a-zA-Z][\\._a-zA-Z0-9]*)\\s+)?([\\*_$a-zA-Z][\\._a-zA-Z0-9]*)\\s*=\\s*(.*)/;\n//\n// function isFuncDeclaration(code) {\n//     return regexFunctionDeclar.test(code)\n// }\n// function isFuncCall(code) {\n//     return regexFunctionCall.test(code)\n// }\n// function isReturnExpr(code) {\n//     return regexReturnExpr.test(code)\n// }\n// function isAssignExpr(code) {\n//     return regexAssignExpr.test(code)\n// }\n// function getFuncDeclaration(code) {\n//     return regexFunctionDeclar.exec(code);\n// }\n// function getFuncCall(code) {\n//     return regexFunctionCall.exec(code);\n// }\n// function getReturnExpr(code) {\n//     return regexReturnExpr.exec(code);\n// }\n// function getAssignExpr(code) {\n//     return regexAssignExpr.exec(code);\n// }\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}